/*********************************************************************
This is a library for our eInk displays based on SSD1675 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/TODO

These displays use SPI to communicate, 6 pins are required to
interface

Adafruit invests time and resources providing this open source code,
please support Adafruit and open-source hardware by purchasing
products from Adafruit!

Written by Dean Miller  for Adafruit Industries.
BSD license, check license.txt for more information
All text above, and the splash screen below must be included in any redistribution
*********************************************************************/

#ifdef __AVR__
  #include <avr/pgmspace.h>
#elif defined(ESP8266) || defined(ESP32)
 #include <pgmspace.h>
#else
 #define pgm_read_byte(addr) (*(const unsigned char *)(addr))
#endif

#if !defined(__ARM_ARCH) && !defined(ENERGIA) && !defined(ESP8266) && !defined(ESP32) && !defined(__arc__)
 #include <util/delay.h>
#endif

#include <stdlib.h>

#include <SPI.h>
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1675.h"

#ifndef USE_EXTERNAL_SRAM
// the memory buffer for the LCD
static uint16_t buffer[SSD1675_BUFSIZE] = {

/*--  
/*-- 104x212  --*/
0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00E7,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x1FFF,0xE0FF,0x00FF,0x00FF,0x00E0,0x003E,0x0000,
0x00FC,0x0007,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x1FFF,0xE0FF,0x00FF,0x00FF,0x00F8,0x000E,0x0000,0x00F8,0x0003,0x7FFF,
0xCFFF,0xFFFF,0xFEFF,0x10FF,0x80FF,0x00FF,0x00FF,0x00FD,0x00CF,0x00EE,0x00FB,0x00FB,0x7FFF,0x0FFF,0xE0FF,0xFEFF,
0x10FF,0x80FF,0x00FF,0x00FF,0x00F8,0x000F,0x008E,0x00FB,0x00FB,0x7EFF,0x0FFF,0xC0FF,0x3EFF,0x1FFF,0x80FF,0x00FF,
0x00FF,0x00E0,0x003F,0x0000,0x00F8,0x0003,0x7CFF,0x0FFF,0x80FF,0x1EFF,0x0FFF,0x00FF,0x00FF,0x00FF,0x00E7,0x00FE,
0x0031,0x00FC,0x0007,0x7CFF,0x1FFF,0x00FF,0x1EFF,0x00FF,0x00FF,0x00FF,0x00FF,0x0000,0x003E,0x00FF,0x00FF,0x00FF,
0x78FF,0x3FFF,0x06FF,0x0EFF,0x0FFF,0x80FF,0x00FF,0x00FF,0x0000,0x003F,0x0007,0x00F8,0x000F,0x78FF,0x7EFF,0x0FFF,
0x0EFF,0x1FFF,0x80FF,0x00FF,0x00FF,0x00EF,0x00BE,0x0003,0x00F8,0x000F,0x78FF,0x7EFF,0x0FFF,0x0EFF,0x10FF,0x00FF,
0x00FF,0x00FF,0x00EF,0x00BE,0x00DB,0x00FF,0x00EF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x10FF,0x00FF,0x00FF,0x00FF,0x00E0,
0x003E,0x0043,0x00FF,0x00EF,0x78FF,0x7CFF,0x1FFF,0x0EFF,0x1FFF,0x80FF,0x00FF,0x00FF,0x00F0,0x007F,0x0047,0x00EC,
0x001F,0x78FF,0x7CFF,0x1FFF,0x0EFF,0x1FFF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00C8,0x000F,0x78FF,0x7CFF,
0x3FFF,0x0EFF,0x40FF,0x80FF,0x00FF,0x00FF,0x0000,0x003F,0x0007,0x00DB,0x00EF,0x78FF,0x78FF,0x3EFF,0x0EFF,0x47FF,
0x80FF,0x00FF,0x00FF,0x0000,0x003E,0x0003,0x00DB,0x00EF,0x78FF,0x38FF,0x3CFF,0x1EFF,0x7FFF,0x00FF,0x00FF,0x00FF,
0x00EF,0x00BE,0x00FB,0x00C0,0x000F,0x7CFF,0x00FF,0x7CFF,0x1EFF,0x38FF,0x00FF,0x00FF,0x00FF,0x00EF,0x00BE,0x00FB,
0x00E0,0x000F,0x7CFF,0x00FF,0x7CFF,0x3EFF,0x1FFF,0x00FF,0x00FF,0x00FF,0x00E0,0x003E,0x0000,0x00FF,0x00FF,0x7EFF,
0x00FF,0xFCFF,0xFEFF,0x07FF,0x80FF,0x00FF,0x00FF,0x00F0,0x007E,0x0000,0x00FC,0x00DF,0x7FFF,0x83FF,0xFFFF,0xFEFF,
0x00FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00F8,0x004F,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x0FFF,0x00FF,0x00FF,
0x00FF,0x00E0,0x000F,0x00FF,0x00FB,0x006F,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x1FFF,0x80FF,0x00FF,0x00FF,0x00E0,0x000F,
0x00FF,0x00F8,0x000F,0x7BFF,0xFFFF,0xFFFF,0xFEFF,0x10FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00F8,0x001F,
0x78FF,0x7FFF,0xFFFF,0xFEFF,0x10FF,0x80FF,0x00FF,0x00FF,0x00F0,0x007F,0x00FF,0x00FF,0x00FF,0x78FF,0x0FFF,0xFFFF,
0xFEFF,0x1FFF,0xE0FF,0x00FF,0x00FF,0x00E0,0x003E,0x0000,0x00F8,0x000F,0x78FF,0x03FF,0xFFFF,0xFEFF,0x1FFF,0xE0FF,
0x00FF,0x00FF,0x00ED,0x00BE,0x0000,0x00F8,0x000F,0x7CFF,0x00FF,0x7FFF,0xFEFF,0x00FF,0x00FF,0x00FF,0x00FF,0x00E4,
0x003E,0x00FE,0x00FF,0x00EF,0x7FFF,0x00FF,0x1FFF,0xFEFF,0x1FFF,0xA0FF,0x00FF,0x00FF,0x00F4,0x007E,0x00FE,0x00FF,
0x00EF,0x7FFF,0xC0FF,0x03FF,0xFEFF,0x1FFF,0xA0FF,0x00FF,0x00FF,0x00FF,0x00FE,0x0000,0x00F8,0x000F,0x7FFF,0xC0FF,
0x00FF,0x7EFF,0x00FF,0x00FF,0x00FF,0x00FF,0x00F4,0x007F,0x0001,0x00F8,0x001F,0x7FFF,0xC3FF,0x00FF,0x1EFF,0x0BFF,
0x00FF,0x00FF,0x00FF,0x00E4,0x003F,0x00FF,0x00FF,0x00FF,0x7FFF,0xC3FF,0xE0FF,0x0EFF,0x1BFF,0x80FF,0x00FF,0x00FF,
0x00ED,0x00BF,0x0007,0x00F8,0x0009,0x7FFF,0xC3FF,0xF8FF,0x0EFF,0x16FF,0x80FF,0x00FF,0x00FF,0x00E1,0x003E,0x0003,
0x00F8,0x0009,0x7FFF,0xC3FF,0xFFFF,0x0EFF,0x16FF,0x80FF,0x00FF,0x00FF,0x00F1,0x007E,0x00DB,0x00FF,0x00FF,0x7FFF,
0xC3FF,0xF8FF,0x0EFF,0x1DFF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FE,0x0043,0x00FC,0x001F,0x7FFF,0xC3FF,0xE0FF,0x0EFF,
0x0DFF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x0047,0x00F8,0x000F,0x7FFF,0xC3FF,0x00FF,0x1EFF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FB,0x00EF,0x7FFF,0xC0FF,0x00FF,0x7EFF,0x7FFF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00F9,0x00CF,0x7FFF,0xC0FF,0x03FF,0xFEFF,0x7FFF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FE,0x0000,0x00FD,0x00DF,
0x7FFF,0x00FF,0x1FFF,0xFEFF,0x10FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FE,0x0000,0x00FF,0x00FF,0x7CFF,0x00FF,0x7FFF,
0xFEFF,0x10FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x03FF,0xFFFF,0xFEFF,0x1FFF,0x80FF,
0x00FF,0x00FF,0x00FF,0x00FE,0x0002,0x007F,0x00FF,0x78FF,0x0FFF,0xFFFF,0xFEFF,0x0FFF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FE,0x0002,0x007F,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x00FF,0x00FF,0x00E7,0x0087,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x7BFF,0xFFFF,0xFFFF,0xFEFF,0x1FFF,0xE0FF,0x00C7,0x0003,0x00FF,0x00FF,0x0007,0x00FF,0x00FF,0x7FFF,0xFFFF,
0xFFFF,0xFEFF,0x1FFF,0xE0FF,0x0087,0x0001,0x00FF,0x00FE,0x0003,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,
0x00FF,0x009E,0x0039,0x00FF,0x00FE,0x00FB,0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x0EFF,0x0DFF,0x00FE,0x0000,0x0000,
0x00FF,0x00FE,0x0073,0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x0EFF,0x1EFF,0x80FF,0x009C,0x0079,0x00FF,0x00FF,0x0077,
0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x0EFF,0x12FF,0x80FF,0x0080,0x0061,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,
0x00FF,0x00FF,0x0EFF,0x1FFF,0x80FF,0x00C0,0x00E3,0x00FF,0x00FE,0x0002,0x007F,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,
0x1FFF,0x00FF,0x00E1,0x00E7,0x00FF,0x00FE,0x0002,0x007F,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x40FF,0x80FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x47FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x0007,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x7FFF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FE,0x0003,0x00FF,0x00FF,
0x78FF,0x7FFF,0xFFFF,0xFEFF,0x38FF,0x00FF,0x00FF,0x00FC,0x003F,0x00FE,0x00FB,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,
0xFEFF,0x1FFF,0x00FF,0x00FF,0x00FE,0x001F,0x00FE,0x00FB,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x07FF,0x80FF,
0x00FF,0x00FE,0x000F,0x00FE,0x0003,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x00FF,0x80FF,0x00FF,0x00FF,0x000F,
0x00FF,0x0007,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x18FF,0x00FF,0x00FF,0x00FF,0x0087,0x00FF,0x00FF,0x00FF,
0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x18FF,0x00FF,0x00FF,0x00FF,0x0081,0x00FF,0x0003,0x00FF,0x00FF,0x78FF,0x7FFF,
0xFFFF,0xFEFF,0x00FF,0x00FE,0x0000,0x0000,0x0000,0x007E,0x0003,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x0FFF,
0x00FE,0x0000,0x0000,0x0000,0x007E,0x00FF,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0xFEFF,0x1FFF,0x80FE,0x0000,0x0000,
0x0000,0x007E,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x10FF,0x80FE,0x0000,0x0000,0x0000,0x007E,0x0003,
0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x19FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FE,0x0003,0x00FF,0x00FF,0x7FFF,
0xFFFF,0xFFFF,0xFEFF,0x09FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x0EFF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x0047,0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x0EFF,0x0FFF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FE,0x0043,0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x0EFF,0x1FFF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FE,
0x00DB,0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x0EFF,0x10FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FE,0x0013,0x00FF,0x00FF,
0x78FF,0x7EFF,0x1FFF,0x0EFF,0x10FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x0017,0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,
0x0EFF,0x1FFF,0x80FE,0x001F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x0FFF,0x00FE,
0x001F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x00FF,0x00FE,0x001F,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x1FFF,0x80FE,0x001F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x1FFF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7EFF,
0x1FFF,0x0EFF,0x00FF,0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x00FF,
0x80FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x1FFF,0x80FE,0x003F,0x00FF,
0x00CF,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x1FFF,0x80FE,0x000F,0x00FF,0x00C3,0x00FF,0x00FF,
0x00FF,0x00FF,0x78FF,0x7EFF,0x1FFF,0x0EFF,0x00FF,0x80FE,0x0003,0x00FF,0x0081,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,
0x7EFF,0x1FFF,0x0EFF,0x00FF,0x80FE,0x0001,0x00FF,0x0080,0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x7FFF,0xFFFF,0x0EFF,
0x1FFF,0x80FE,0x0000,0x00FF,0x00E0,0x007F,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x1FFF,0x00FE,0x0000,
0x007F,0x00F0,0x007F,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FE,0x0000,0x003F,0x00F8,0x007F,
0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FE,0x0018,0x001F,0x00F8,0x007F,0x00FF,0x00FF,0x00FF,
0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FE,0x001C,0x000F,0x00F8,0x007F,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,
0xFEFF,0x00FF,0x00FE,0x001E,0x0003,0x00F8,0x007F,0x00FF,0x00FF,0x00FF,0x78FF,0x7FFF,0x80FF,0x0EFF,0x00FF,0x00FE,
0x001F,0x0001,0x00F0,0x007F,0x00FF,0x00FF,0x00FF,0x78FF,0x60FF,0x00FF,0x0EFF,0x00FF,0x00FE,0x001F,0x0080,0x0000,
0x00FF,0x00FF,0x00FF,0x00FF,0x78FF,0x60FF,0x00FF,0x0EFF,0x00FF,0x00FE,0x001F,0x00C0,0x0001,0x00FF,0x00FF,0x00FF,
0x00FF,0x78FF,0x7FFF,0x80FF,0x0EFF,0x00FF,0x00FE,0x001F,0x00F0,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,
0xFFFF,0xFEFF,0x00FF,0x00FE,0x001F,0x00FC,0x000F,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FF,0x00E7,0x00F8,0x000F,0x00FF,0x00FF,
0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FF,0x0087,0x00E0,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,
0xFFFF,0xFFFF,0xFEFF,0x00FF,0x00FF,0x0003,0x00C0,0x0001,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFFFF,0xFFFF,0xFEFF,
0x00FF,0x00FF,0x0003,0x0080,0x0000,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFEFF,0x7FFF,0xFEFF,0x00FF,0x00FE,0x000F,
0x0083,0x00E0,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xFCFF,0x7FFF,0xFEFF,0x00FF,0x00FE,0x001F,0x0007,0x00F0,0x007F,
0x00FF,0x00FF,0x00FF,0x7FFF,0xFCFF,0x3FFF,0xFEFF,0x00FF,0x00FE,0x001F,0x000F,0x00F8,0x007F,0x00FF,0x00FF,0x00FF,
0x7FFF,0xF8FF,0x3FFF,0xFEFF,0x00FF,0x00FE,0x001F,0x000F,0x00F8,0x007F,0x00FF,0x00FF,0x00FF,0x7FFF,0xF8FF,0x1FFF,
0xFEFF,0x00FF,0x00FE,0x001F,0x000F,0x00F8,0x007F,0x00FF,0x00FF,0x00FF,0x7FFF,0xF0FF,0x1FFF,0xFEFF,0x00FF,0x00FF,
0x000F,0x0087,0x00F0,0x007F,0x00FF,0x00FF,0x00FF,0x7FFF,0xF0FF,0x0FFF,0xFEFF,0x00FF,0x00FF,0x0003,0x0083,0x00E0,
0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xE0FF,0x0FFF,0xFEFF,0x00FF,0x00FF,0x0080,0x0000,0x0001,0x00FF,0x00FF,0x00FF,
0x00FF,0x7FFF,0xE0FF,0x07FF,0xFEFF,0x00FF,0x00FF,0x00C0,0x0000,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0xC0FF,
0x03FF,0xFEFF,0x00FF,0x00FF,0x00E0,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0x80FF,0x03FF,0xFEFF,0x00FF,
0x00FF,0x00FE,0x0000,0x003F,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0x80FF,0x01FF,0xFEFF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7FFF,0x00FF,0x01FF,0xFEFF,0x00FF,0x00FE,0x007F,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x7FFF,0x00FF,0x00FF,0xFEFF,0x00FF,0x00FE,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7EFF,
0x00FF,0x00FF,0xFEFF,0x00FF,0x00FF,0x0080,0x007F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7EFF,0x00FF,0x00FF,0x7EFF,
0x00FF,0x00FF,0x00F8,0x000F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7CFF,0x00FF,0x00FF,0x7EFF,0x00FF,0x00FF,0x00FF,
0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x7CFF,0x00FF,0x00FF,0x3EFF,0x00FF,0x00FF,0x00FF,0x00F3,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x78FF,0x00FF,0x00FF,0x3EFF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x78FF,0x00FF,0x00FF,0x1EFF,0x00FF,0x00FE,0x0000,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x70FF,0x00FF,0x00FF,
0x0EFF,0x00FF,0x00FE,0x0000,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x70FF,0x00FF,0x00FF,0x0EFF,0x00FF,0x00FE,
0x0000,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x60FF,0x00FF,0x00FF,0x06FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x60FF,0x00FF,0x00FF,0x06FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x40FF,0x00FF,0x00FF,0x02FF,0x00FF,0x00FE,0x0000,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x40FF,0x00FF,
0x00FF,0x02FF,0x00FF,0x00FE,0x0000,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FE,0x0000,0x0003,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x003E,0x007F,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FE,0x007F,0x003F,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FE,0x007F,0x003F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FE,0x007F,0x003F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FE,0x003E,0x003F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x0000,
0x007F,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x0000,0x007F,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00C1,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x0000,0x0003,0x00FF,0x0080,0x0000,0x0000,0x0007,0x00FF,0x00FF,
0x00FF,0x00FF,0x00C0,0x0000,0x0000,0x0007,0x00FF,0x00C0,0x0000,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,
0x0000,0x0000,0x007F,0x00FF,0x00FC,0x0000,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x0001,0x00FF,
0x00FF,0x00FF,0x0000,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x000F,0x00F0,0x0000,0x001F,0x00E0,
0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x001F,0x0080,0x0020,0x0003,0x00F0,0x0000,0x0007,0x00FF,
0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x007C,0x000F,0x00F0,0x0000,0x00FC,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,
0x00C0,0x0000,0x00F8,0x007F,0x00F0,0x0000,0x003E,0x0000,0x0007,0x00F0,0x003F,0x00FF,0x008F,0x00C0,0x0003,0x00E1,
0x00FF,0x00F0,0x0000,0x000F,0x0080,0x0007,0x00C0,0x000F,0x00FF,0x00C7,0x00C0,0x0007,0x0087,0x00FF,0x00F0,0x0000,
0x0003,0x00C0,0x0007,0x0080,0x0007,0x00FF,0x00E7,0x00C0,0x000F,0x001F,0x00FF,0x00F0,0x0000,0x0001,0x00E0,0x0007,
0x0087,0x0087,0x0080,0x0003,0x00C0,0x001E,0x003E,0x0003,0x00F0,0x0000,0x0000,0x00F0,0x0007,0x000F,0x00C3,0x0080,
0x0001,0x00C0,0x003C,0x007C,0x0001,0x00F0,0x0000,0x0000,0x0078,0x0007,0x001F,0x00E3,0x0080,0x0001,0x00C0,0x0078,
0x00FD,0x00FD,0x00F0,0x0000,0x0000,0x003C,0x0007,0x001F,0x00E3,0x00FF,0x00FF,0x00C0,0x0073,0x00FD,0x00FD,0x00F0,
0x0000,0x0000,0x001C,0x0007,0x001F,0x00E3,0x00FF,0x00FF,0x00C0,0x00E3,0x00FC,0x0001,0x00F0,0x0000,0x0000,0x000E,
0x0007,0x000F,0x00C3,0x00FF,0x00FF,0x00C1,0x00C7,0x00FE,0x0003,0x00F0,0x0000,0x0000,0x000F,0x0007,0x0087,0x0087,
0x00FF,0x00FF,0x00C1,0x00CF,0x00FF,0x00FF,0x00F0,0x001F,0x00F0,0x0007,0x0007,0x0080,0x0007,0x00FF,0x00FF,0x00C3,
0x009F,0x00FC,0x0001,0x00F0,0x003F,0x00F0,0x0003,0x0087,0x00C0,0x000F,0x00FF,0x00FF,0x00C7,0x009F,0x00FC,0x0001,
0x00F0,0x0060,0x0000,0x0003,0x0087,0x00F0,0x003F,0x00FF,0x00FF,0x00C7,0x003F,0x00FF,0x00DD,0x00F0,0x0060,0x0000,
0x0001,0x00C7,0x00FF,0x00FF,0x00FF,0x00FF,0x00C7,0x003F,0x00FF,0x001D,0x00F0,0x0060,0x0000,0x0001,0x00C7,0x00FF,
0x00FF,0x00FF,0x00FF,0x00CE,0x007F,0x00FE,0x0001,0x00F0,0x003F,0x00F0,0x0000,0x00E7,0x0000,0x0003,0x0080,0x0001,
0x00CE,0x007F,0x00FC,0x0063,0x00F0,0x003F,0x00F0,0x0000,0x00E7,0x0000,0x0003,0x0080,0x0001,0x00DC,0x007F,0x00FD,
0x00FF,0x00F0,0x0000,0x0000,0x0000,0x0067,0x0000,0x0003,0x0080,0x0001,0x00DC,0x00FF,0x00FF,0x00FF,0x00F0,0x0000,
0x0000,0x0000,0x0077,0x00FF,0x0083,0x008F,0x00F1,0x00DC,0x00FF,0x00FE,0x0003,0x00F0,0x0039,0x00E0,0x0000,0x0077,
0x00FE,0x000F,0x008F,0x00F1,0x00D9,0x00FF,0x00FC,0x0001,0x00F0,0x007B,0x00F0,0x0000,0x0077,0x00F8,0x003F,0x008F,
0x00F1,0x00F9,0x00FF,0x00FD,0x00FD,0x00F0,0x0063,0x0030,0x0000,0x003F,0x00E0,0x00FF,0x008F,0x00F1,0x00F9,0x00FF,
0x00FD,0x00DD,0x00F0,0x0063,0x0030,0x0000,0x003F,0x0083,0x00FF,0x008F,0x00F1,0x00F9,0x00FF,0x00FC,0x0011,0x00F0,
0x0066,0x0030,0x0000,0x003F,0x0000,0x0003,0x0087,0x00E1,0x00F9,0x00FF,0x00FE,0x0013,0x00F0,0x007E,0x00F0,0x0000,
0x003F,0x0000,0x0003,0x00C0,0x0003,0x00F9,0x00FF,0x00FF,0x00FF,0x00F0,0x003C,0x00E0,0x0000,0x003F,0x0000,0x0003,
0x00E0,0x0007,0x00F9,0x00FF,0x00FC,0x00FF,0x00F0,0x0000,0x0000,0x0000,0x003F,0x00FF,0x00FF,0x00F8,0x001F,0x00F9,
0x00FF,0x00FC,0x0007,0x00F0,0x0000,0x0000,0x0000,0x003F,0x00FF,0x00FF,0x00FF,0x00FF,0x00F9,0x00FF,0x00FF,0x0001,
0x00F0,0x007F,0x00F0,0x0000,0x003F,0x0000,0x0003,0x009F,0x00FF,0x00F9,0x00FF,0x00FF,0x00B9,0x00F0,0x007F,0x00F0,
0x0000,0x003F,0x0000,0x0003,0x0083,0x00FF,0x00F9,0x00FF,0x00FF,0x0001,0x00F0,0x0060,0x0030,0x0000,0x003F,0x0000,
0x0003,0x0080,0x007F,0x00F9,0x00FF,0x00FC,0x0007,0x00F0,0x0060,0x0030,0x0000,0x003F,0x001F,0x00FF,0x00E0,0x000F,
0x00F9,0x00FF,0x00FC,0x00FF,0x00F0,0x0070,0x0070,0x0000,0x003F,0x001F,0x00FF,0x00F0,0x0001,0x00F9,0x00FF,0x00FF,
0x00FF,0x00F0,0x003F,0x00E0,0x0000,0x003F,0x001F,0x00FF,0x00F1,0x0081,0x00DD,0x00FF,0x00FC,0x0001,0x00F0,0x001F,
0x00C0,0x0000,0x0077,0x001F,0x00FF,0x00F1,0x00F1,0x00DC,0x00FF,0x00FC,0x0001,0x00F0,0x0000,0x0000,0x0000,0x0077,
0x001F,0x00FF,0x00F1,0x0081,0x00DC,0x00FF,0x00FF,0x00C3,0x00F0,0x0060,0x0000,0x0000,0x0077,0x001F,0x00FF,0x00F0,
0x0001,0x00DC,0x00FF,0x00FE,0x001F,0x00F0,0x007C,0x0000,0x0000,0x0067,0x001F,0x00FF,0x00E0,0x000F,0x00CE,0x007F,
0x00FC,0x0001,0x00F0,0x001F,0x0080,0x0000,0x00E7,0x00FF,0x00FF,0x0080,0x007F,0x00CE,0x007F,0x00FC,0x0001,0x00F0,
0x001B,0x00F0,0x0000,0x00E7,0x00FF,0x00FF,0x0083,0x00FF,0x00C7,0x003F,0x00FF,0x00FF,0x00F0,0x0018,0x0070,0x0001,
0x00C7,0x00FF,0x00F3,0x009F,0x00FF,0x00C7,0x003F,0x00FC,0x0001,0x00F0,0x001B,0x00F0,0x0001,0x00C7,0x00FF,0x00C3,
0x00FF,0x00FF,0x00C3,0x009F,0x00FC,0x0001,0x00F0,0x001F,0x0080,0x0003,0x0087,0x00FF,0x0083,0x00FF,0x00F9,0x00C3,
0x009F,0x00FF,0x00FF,0x00F0,0x007C,0x0000,0x0003,0x0087,0x00FE,0x000F,0x00FF,0x00E1,0x00C1,0x00CF,0x00FE,0x0003,
0x00F0,0x0060,0x0000,0x0007,0x0007,0x0000,0x003F,0x00FF,0x00C1,0x00C1,0x00E7,0x00FC,0x0001,0x00F0,0x0000,0x0000,
0x000F,0x0007,0x0000,0x007F,0x00FF,0x0007,0x00C0,0x00E3,0x00FD,0x00FD,0x00F0,0x0000,0x0000,0x000E,0x0007,0x0000,
0x003F,0x0080,0x001F,0x00C0,0x0071,0x00FD,0x00FD,0x00F0,0x0000,0x0000,0x001C,0x0007,0x00FE,0x000F,0x0080,0x003F,
0x00C0,0x0078,0x00FC,0x0071,0x00F0,0x0000,0x0000,0x003C,0x0007,0x00FF,0x0083,0x0080,0x001F,0x00C0,0x003C,0x007E,
0x0073,0x00F0,0x0000,0x0000,0x0078,0x0007,0x00FF,0x00C3,0x00FF,0x0007,0x00C0,0x001E,0x003F,0x00FF,0x00F0,0x0000,
0x0000,0x00F0,0x0007,0x00FF,0x00F3,0x00FF,0x00C1,0x00C0,0x000F,0x001F,0x00FF,0x00F0,0x0000,0x0001,0x00E0,0x0007,
0x00FF,0x00FF,0x00FF,0x00E1,0x00C0,0x0007,0x00C7,0x00FF,0x00F0,0x0000,0x0007,0x00C0,0x0007,0x00FF,0x00FF,0x00FF,
0x00F9,0x00C0,0x0003,0x00E1,0x00FF,0x00F0,0x0000,0x000F,0x0080,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,
0x00F8,0x007F,0x00F0,0x0000,0x003E,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x007E,0x000F,0x00F0,
0x0000,0x00FC,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x001F,0x0080,0x0000,0x0003,0x00F0,0x0000,
0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x0007,0x00F8,0x0000,0x003F,0x00C0,0x0000,0x0007,0x00FF,0x00FF,
0x00FF,0x00FF,0x00C0,0x0000,0x0001,0x00FF,0x00FF,0x00FF,0x0000,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,
0x0000,0x0000,0x003F,0x00FF,0x00F8,0x0000,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00C0,0x0000,0x0000,0x0007,
0x00FF,0x00C0,0x0000,0x0000,0x0007,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,
0x00FF,0x00FF,0x00FF,
};
#else

#define RAMBUFSIZE 256

#endif

const uint8_t init_data[]={
	0xA5,	0x89,	0x10,	0x00,	0x00,	0x00,	0x00,	0xA5,	0x19,	0x80,	0x00,	0x00,	0x00,	0x00,	0xA5,	0xA9,
	0x9B,	0x00,	0x00,	0x00,	0x00,	0xA5,	0xA9,	0x9B,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,
	0x00,	0x00,	0x00,	0x0F,	0x0F,	0x0F,	0x0F,	0x02,	0x10,	0x10,	0x0A,	0x0A,	0x03,	0x08,	0x08,	0x09,
	0x43,	0x07,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,
	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,
};

#define SSD1675_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SSD1675::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;
	
  uint16_t *pBuf;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
  case 1:
    SSD1675_swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    SSD1675_swap(x, y);
    y = HEIGHT - y - 1;
    break;
  }

	uint16_t addr = (x * SSD1675_LCDHEIGHT / 8) + y/8;

#ifdef USE_EXTERNAL_SRAM
	addr = addr * 2; //2 bytes in sram
	uint16_t c = sram.read16(addr);
	pBuf = &c;
#else
	pBuf = buffer + addr;
#endif
  // x is which column
    switch (color)
    {
      case BLACK:   *pBuf |= (1 << (7 - y&7)); break;
      case WHITE:   *pBuf &= ~(1 << (7 - y&7)); break;
      case INVERSE: *pBuf ^= (1 << (7 - y&7)); break;
	  case RED:   *pBuf |= (1 << (15 - (y%8))); break;
    }
#ifdef USE_EXTERNAL_SRAM
	sram.write16(addr, *pBuf);
#endif
	
}

#ifdef USE_EXTERNAL_SRAM
Adafruit_SSD1675::Adafruit_SSD1675(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS, int8_t BUSY, int8_t SRCS, int8_t MISO) : Adafruit_GFX(SSD1675_LCDWIDTH, SSD1675_LCDHEIGHT),
sram(SID, MISO, SCLK, SRCS) {
#else
Adafruit_SSD1675::Adafruit_SSD1675(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS, int8_t BUSY) : Adafruit_GFX(SSD1675_LCDWIDTH, SSD1675_LCDHEIGHT) {
#endif
  cs = CS;
  rst = RST;
  dc = DC;
  sclk = SCLK;
  sid = SID;
  busy = BUSY;
  hwSPI = false;
}

// constructor for hardware SPI - we indicate DataCommand, ChipSelect, Reset
#ifdef USE_EXTERNAL_SRAM
Adafruit_SSD1675::Adafruit_SSD1675(int8_t DC, int8_t RST, int8_t CS, int8_t BUSY, int8_t SRCS) : Adafruit_GFX(SSD1675_LCDWIDTH, SSD1675_LCDHEIGHT),
sram(SRCS) {
#else
Adafruit_SSD1675::Adafruit_SSD1675(int8_t DC, int8_t RST, int8_t CS, int8_t BUSY) : Adafruit_GFX(SSD1675_LCDWIDTH, SSD1675_LCDHEIGHT) {
#endif
  dc = DC;
  rst = RST;
  cs = CS;
  busy = BUSY;
  hwSPI = true;
}


void Adafruit_SSD1675::begin(bool reset) {
  uint8_t buf[5];
  blackInverted = true;
  redInverted = false;
  
#ifdef USE_EXTERNAL_SRAM
	sram.begin();
	sram.write8(0, K640_SEQUENTIAL_MODE, K640_WRSR);
#endif
  
  // set pin directions
    pinMode(dc, OUTPUT);
    pinMode(cs, OUTPUT);
#ifdef HAVE_PORTREG
    csport      = portOutputRegister(digitalPinToPort(cs));
    cspinmask   = digitalPinToBitMask(cs);
    dcport      = portOutputRegister(digitalPinToPort(dc));
    dcpinmask   = digitalPinToBitMask(dc);
#endif

	csHigh();

    if (!hwSPI){
      // set pins for software-SPI
      pinMode(sid, OUTPUT);
      pinMode(sclk, OUTPUT);
#ifdef HAVE_PORTREG
      clkport     = portOutputRegister(digitalPinToPort(sclk));
      clkpinmask  = digitalPinToBitMask(sclk);
      mosiport    = portOutputRegister(digitalPinToPort(sid));
      mosipinmask = digitalPinToBitMask(sid);
#endif
      }
    if (hwSPI){
      SPI.begin();
#ifdef SPI_HAS_TRANSACTION
      SPI.beginTransaction(SPISettings(8000000, MSBFIRST, SPI_MODE0));
#else
      SPI.setClockDivider (4);
#endif
    }

  if ((reset) && (rst >= 0)) {
    // Setup reset pin direction
    pinMode(rst, OUTPUT);
    digitalWrite(rst, HIGH);
    // VDD (3.3V) goes high at start, lets just chill for a ms
    delay(1);
    // bring reset low
    digitalWrite(rst, LOW);
    // wait 10ms
    delay(10);
    // bring out of reset
    digitalWrite(rst, HIGH);
  }
  pinMode(busy, INPUT);
  while(digitalRead(busy)); //wait for busy low
  
  // Init sequence
	if(reset){
	  SSD1675_command(SSD1675_SWRST);
	  while(digitalRead(busy)); //wait for busy low
	}
  
  	buf[0] = 0x54;
	SSD1675_command(SSD1675_SET_ANALOG_BLOCK_CONTROL, buf, 1);
	
	buf[0] = 0x3B;
	SSD1675_command(SSD1675_SET_DIGITAL_BLOCK_CONTROL, buf, 1);
	
	//set display size and driver output control
	buf[0] = 0xD3;
	buf[1] = 0x00;
	buf[2] = 0x00;
	SSD1675_command(SSD1675_DRIVER_OUTPUT_CONTROL, buf, 3);
	
	buf[0] = 0x18;
	SSD1675_command(SSD1675_SET_DUMMY_LINE_PERIOD, buf, 1);
	
	buf[0] = 0x05;
	SSD1675_command(SSD1675_SET_GATE_LINE_WIDTH, buf, 1);
	
	//ram data entry mode
	buf[0] = 0x03;
	SSD1675_command(SSD1675_DATA_ENTRY_MODE_SETTING, buf, 1);
	
	//ram x address
	buf[0] = 0x00;
	buf[1] = 0x0c;
	SSD1675_command(SSD1675_SET_RAM_X_START_END, buf, 2);
	
	//ram y address
	buf[0] = 0x00;
	buf[1] = 0x00;
	buf[2] = 0xD3;
	buf[3] = 0x00;
	buf[4] = 0x00;
	SSD1675_command(SSD1675_SET_RAM_Y_START_END, buf, 5);
	
	buf[0] = 0x17; //20V
	SSD1675_command(SSD1675_GATE_VOLTAGE_CONTROL, buf, 1);
	
	buf[0] = 0x2D; //11V
	buf[1] = 0xA8; //5V
	buf[2] = 0x32; //-15V
	SSD1675_command(SSD1675_SOURCE_VOLTAGE_CONTROL, buf, 1);
	
	buf[0] = 0x3C; //-1.5V
	SSD1675_command(SSD1675_WRITE_VCOM, buf, 1);
	
	//set border
	buf[0] = 0x33;
	SSD1675_command(SSD1675_BORDER_WAVEFORM_CONTROL, buf, 1);
	
	buf[0] = 0x08;
	SSD1675_command(SSD1675_DISPLAY_UPDATE_CTRL_1, buf, 1);
	
	//write LUT
	SSD1675_command(SSD1675_WRITE_LUT_REGISTER, init_data, 70);
}

void Adafruit_SSD1675::SSD1675_command(uint8_t c, const uint8_t *buf, uint16_t len)
{
	SSD1675_command(c, false);
	SSD1675_data(buf, len);
}

void Adafruit_SSD1675::SSD1675_command(uint8_t c, bool end) {
    // SPI
	csHigh();
	dcLow();
	csLow();
	
    fastSPIwrite(c);

	if(end){
		csHigh();
	}
}

void Adafruit_SSD1675::SSD1675_data(const uint8_t *buf, uint16_t len)
{
	// SPI
	dcHigh();

	for (uint16_t i=0; i<len; i++) {
		fastSPIwrite(buf[i]);
	}
	csHigh();
}

void Adafruit_SSD1675::update()
{
	uint8_t c = 0xc7;
	SSD1675_command(SSD1675_DISPLAY_UPDATE_CTRL_2, &c, 1);
	
	SSD1675_command(SSD1675_MASTER_ACTIVATION);
	
	while(digitalRead(busy)); //wait for busy low
}

void Adafruit_SSD1675::display() 
{

uint8_t cmdbuf[2];
	
#ifdef USE_EXTERNAL_SRAM
	uint8_t databuf[RAMBUFSIZE];
	
	cmdbuf[0] = 0x00;
	SSD1675_command(SSD1675_SET_RAM_X_ADDRESS_COUNTER, cmdbuf, 1);
	
	cmdbuf[0] = 0x00;
	cmdbuf[1] = 0x00;
	SSD1675_command(SSD1675_SET_RAM_Y_ADDRESS_COUNTER, cmdbuf, 2);
	
	for(uint16_t i=0; i<SSD1675_BUFSIZE*2; i+=RAMBUFSIZE){
		sram.read(i, databuf, RAMBUFSIZE);
	
		//write image
		SSD1675_command(SSD1675_WRITE_RAM_1, false);
		dcHigh();
		
		uint16_t toWrite = min(SSD1675_BUFSIZE*2 - i, RAMBUFSIZE);
		for(uint16_t j=0; j<toWrite; j+=2){
			fastSPIwrite(databuf[j]);
		}

		csHigh();
	
		SSD1675_command(SSD1675_WRITE_RAM_2, false);
		dcHigh();
	
		for(uint16_t j=0; j<toWrite; j+=2){
			fastSPIwrite(databuf[j + 1]);
		}

		csHigh();
	}
	
#else
	cmdbuf[0] = 0x00;
	SSD1675_command(SSD1675_SET_RAM_X_ADDRESS_COUNTER, cmdbuf, 1);
	
	cmdbuf[0] = 0x00;
	cmdbuf[1] = 0x00;
	SSD1675_command(SSD1675_SET_RAM_Y_ADDRESS_COUNTER, cmdbuf, 2);
	
	//write image
	SSD1675_command(SSD1675_WRITE_RAM_1, false);
	dcHigh();

	for(uint16_t i=0; i<SSD1675_BUFSIZE; i++){
		fastSPIwrite(buffer[i] & 0xFF);
	}
	csHigh();
	
	SSD1675_command(SSD1675_WRITE_RAM_2, false);
	dcHigh();
	
	for(uint16_t i=0; i<SSD1675_BUFSIZE; i++){
		fastSPIwrite( (buffer[i] >> 8) & 0xFF);
	}
	csHigh();
#endif

	update();
}

void Adafruit_SSD1675::sleep()
{
	//enter deep sleep. MUST HW RESET TO EXIT DEEP SLEEP
	uint8_t c = 0x01;
	SSD1675_command(SSD1675_DEEP_SLEEP_MODE, &c, 1);
}

// clear everything
void Adafruit_SSD1675::clearDisplay() {
#ifdef USE_EXTERNAL_SRAM
  sram.erase(0x00, SSD1675_BUFSIZE * 2);
#else
  memset(buffer, 0x00, SSD1675_BUFSIZE * 2);
#endif
}


inline void Adafruit_SSD1675::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      *clkport &= ~clkpinmask;
      if(d & bit) *mosiport |=  mosipinmask;
      else        *mosiport &= ~mosipinmask;
      *clkport |=  clkpinmask;
#else
      digitalWrite(sclk, LOW);
      if(d & bit) digitalWrite(sid, HIGH);
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}

void Adafruit_SSD1675::csHigh()
{
#ifdef HAVE_PORTREG
	*csport |= cspinmask;
#else
	digitalWrite(cs, HIGH);
#endif
}

void Adafruit_SSD1675::csLow()
{
#ifdef HAVE_PORTREG
	*csport &= ~cspinmask;
#else
	digitalWrite(cs, LOW);
#endif
}

void Adafruit_SSD1675::dcHigh()
{
#ifdef HAVE_PORTREG
	*dcport |= dcpinmask;
#else
	digitalWrite(dc, HIGH);
#endif
}

void Adafruit_SSD1675::dcLow()
{
#ifdef HAVE_PORTREG
	*dcport &= ~dcpinmask;
#else
	digitalWrite(dc, LOW);
#endif
}

void Adafruit_SSD1675::invertDisplay(bool black, bool red)
{
	uint8_t c = (blackInverted << 3) | (redInverted << 7);
	if(black){
		blackInverted = blackInverted;
		c ^= (blackInverted << 3);
	}
	if(red){
		redInverted = !redInverted;
		c ^= (redInverted << 7);
	}
	SSD1675_command(SSD1675_DISPLAY_UPDATE_CTRL_1, &c, 1);
}

void Adafruit_SSD1675::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  boolean bSwap = false;
  switch(rotation) {
    case 0:
      // 0 degree rotation, do nothing
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      SSD1675_swap(x, y);
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
      x -= (w-1);
      break;
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      SSD1675_swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
      break;
  }

  if(bSwap) {
    drawFastVLineInternal(x, y, w, color);
  } else {
    drawFastHLineInternal(x, y, w, color);
  }
}

void Adafruit_SSD1675::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {
	  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }

  // make sure we don't try to draw below 0
  if(__y < 0) {
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
    __h = (HEIGHT - __y);
  }

  // if our height is now negative, punt
  if(__h <= 0) {
    return;
  }

  // set up the pointer for  movement through the buffer
  uint16_t addr = (x * SSD1675_LCDHEIGHT / 8) + __y/8;
  
#ifdef USE_EXTERNAL_SRAM
  addr = addr * 2; //2 bytes each in sram
  uint16_t * pBuf;
  uint16_t c = sram.read16(addr);
  pBuf = &c;
#else
  register uint16_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += addr;
#endif
  
  uint8_t blocks = __h/8;
  while(blocks){
	  	switch (color)
	  	{
		  	case BLACK:         *pBuf = 0xFF; break;
		  	case WHITE:			*pBuf = 0x00; break;
		  	case INVERSE:       *pBuf ^= 0xFF; break;
		  	case  RED:			*pBuf = 0xFF00; break;
	  	}
#ifdef USE_EXTERNAL_SRAM
	  //write the new value
	  sram.write16(addr, *pBuf);
	  
	  //increment the addres
	  addr =+ 2;
	  *pBuf = sram.read16(addr);
#endif
	  blocks--;
  }
  
  //do the last block w/ the leftover
  for(int i=0; i< __h%8; i++){
	  switch (color)
		{
		  case BLACK:   *pBuf |= (1 << (7 - i&7)); break;
		  case WHITE:   *pBuf  &= ~(1 << (7 - i&7)); break;
		  case INVERSE: *pBuf  ^= (1 << (7 - i&7)); break;
		  case RED:   *pBuf  |= (1 << (15 - (i%8))); break;
		}
  }
}

void Adafruit_SSD1675::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
  bool bSwap = false;
  switch(rotation) {
    case 0:
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      SSD1675_swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
      y -= (h-1);
      break;
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y
      bSwap = true;
      SSD1675_swap(x, y);
      y = HEIGHT - y - 1;
      break;
  }

  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}


void Adafruit_SSD1675::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {

    // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
    w = (WIDTH - x);
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
	  
  uint16_t addr = (x * SSD1675_LCDHEIGHT / 8) + y/8;

#ifdef USE_EXTERNAL_SRAM
	addr = addr * 2; //2 bytes in sram
	uint16_t * pBuf;
	uint16_t c = sram.read16(addr * 2);
	pBuf = &c;
#else
    register uint16_t *pBuf = buffer;
	pBuf = buffer + addr;
#endif
	// x is which column
	switch (color)
	{
		case BLACK:   *pBuf |= (1 << (7 - y&7)); break;
		case WHITE:   *pBuf &= ~(1 << (7 - y&7)); break;
		case INVERSE: *pBuf ^= (1 << (7 - y&7)); break;
		case RED:   *pBuf |= (1 << (15 - (y%8))); break;
	}
#ifdef USE_EXTERNAL_SRAM
	sram.write16(addr, *pBuf);
#endif
  
  uint8_t i = (y%8);
  for(int j=0; j< w; j++){
	switch (color)
	{
		case BLACK:   *pBuf |= (1 << (7 - i)); break;
		case WHITE:   *pBuf  &= ~(1 << (7 - i)); break;
		case INVERSE: *pBuf  ^= (1 << (7 - i)); break;
		case RED:   *pBuf  |= (1 << (15 - i)); break;
	}
#ifdef USE_EXTERNAL_SRAM
	//write the new value
	sram.write16(addr, *pBuf);

	//increment the addres
	addr += (SSD1675_LCDHEIGHT / 8) * 2;
	
	*pBuf = sram.read16(addr);
#else
	*pBuf += SSD1675_LCDHEIGHT / 8;
#endif
  }
}
